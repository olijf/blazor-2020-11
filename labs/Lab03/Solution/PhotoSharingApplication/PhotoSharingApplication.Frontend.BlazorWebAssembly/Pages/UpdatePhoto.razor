@page "/photos/update/{id:int}"

@using PhotoSharingApplication.Frontend.Core.Interfaces
@using PhotoSharingApplication.Frontend.Core.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager

@if (photo == null) {
    <p>...Loading...</p>
} else {
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatCard>
                    <MatCardContent>
                        <MatH3>Update Photo</MatH3>
                        <EditForm Model="@photo" OnValidSubmit="HandleValidSubmit">
                            <p>
                                <MatTextField @bind-Value="@photo.Title" Label="Title" FullWidth></MatTextField>
                            </p>
                            <p>
                                <MatTextField @bind-Value="@photo.Description" Label="Description" TextArea FullWidth></MatTextField>
                            </p>
                            <p>
                                <MatFileUpload OnChange="@HandleMatFileSelected"></MatFileUpload>
                            </p>
                            <p>
                                <MatButton Type="submit">Update</MatButton>
                            </p>
                        </EditForm>
                        <MatCardMedia Wide="true" ImageUrl="@(photo.PhotoFile == null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")"></MatCardMedia>
                    </MatCardContent>
                </MatCard>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }

    Photo photo;

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }

    private async Task HandleValidSubmit() {
        await photosService.UpdateAsync(photo);
        navigationManager.NavigateTo("/photos/all");
    }

    async Task HandleMatFileSelected(IMatFileUploadEntry[] files) {
        IMatFileUploadEntry file = files.FirstOrDefault();
        photo.ImageMimeType = file.Type;

        if (file == null) {
            return;
        }

        using (var stream = new System.IO.MemoryStream()) {
            await file.WriteToStreamAsync(stream);
            photo.PhotoFile = stream.ToArray();
        }

    }
}

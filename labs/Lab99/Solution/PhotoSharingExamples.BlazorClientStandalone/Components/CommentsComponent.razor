@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging;
@using PhotoSharingExamples.Shared.Authorization

@inject PhotoSharingExamples.Frontend.Core.Interfaces.ICommentsService CommentsService

@inject IAccessTokenProvider AuthenticationService
@inject IAuthorizationService AuthorizationService


@inject NavigationManager NavigationManager

<h3>Comments</h3>
@if (comments == null)
{
    <p><em>Loading...</em></p>
} else {
    <div class="list-group">
    @foreach (var comment in comments)
    {
        bool mayEditDeleteComment = MayEditDeleteComment(comment).Result;
        <CommentComponent CommentItem="comment" Edit="mayEditDeleteComment" Delete="mayEditDeleteComment" OnDeleteConfirmed="OnDeleteComment" OnSave="OnUpdateComment" @key="comment"></CommentComponent>
    }
    @if (user.Identity.IsAuthenticated)
    {
        <CommentCreateEditComponent CreateMode="true" OnSave="OnCreateComment" CommentItem="new PhotoSharingExamples.Shared.Entities.Comment() { PhotoId = PhotoId, UserName = user.Identity.Name }"></CommentCreateEditComponent>
        <p class="text-danger">@message</p>
    }
</div>
}


@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public int PhotoId { get; set; }

    private List<PhotoSharingExamples.Shared.Entities.Comment> comments;

    string message;
    private System.Security.Claims.ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        comments = await CommentsService.GetCommentsForPhotoAsync(PhotoId);
        user = (await authenticationStateTask).User;
    }

    async Task<bool> MayEditDeleteComment(PhotoSharingExamples.Shared.Entities.Comment c)
    {
        AuthorizationResult ar = await AuthorizationService.AuthorizeAsync(user, c, Policies.EditDeleteComment);
        return user.Identity.IsAuthenticated && ar.Succeeded;
    }

    async Task OnDeleteComment(PhotoSharingExamples.Shared.Entities.Comment comment)
    {
        var tokenResult = await AuthenticationService.RequestAccessToken(new AccessTokenRequestOptions() { Scopes = new string[] { "comments" } });

        if (tokenResult.TryGetToken(out var token))
        {
            try
            {
                PhotoSharingExamples.Shared.Entities.Comment deletedComment = await CommentsService.RemoveAsync(comment.Id, token.Value);
                comments.Remove(comment); 
            }
            catch (Exception ex)
            {
                message = ex.Message;
            }
        }
        else
        {
            NavigationManager.NavigateTo(tokenResult.RedirectUrl);
        }

    }

    private async Task OnUpdateComment(PhotoSharingExamples.Shared.Entities.Comment comment)
    {
        var tokenResult = await AuthenticationService.RequestAccessToken(new AccessTokenRequestOptions() { Scopes = new string[] { "comments" } });

        if (tokenResult.TryGetToken(out var token))
        {
            comment = await CommentsService.UpdateAsync(comment.Id, comment.Subject, comment.Body, token.Value);
        }
        else
        {
            NavigationManager.NavigateTo(tokenResult.RedirectUrl);
        }
    }
    private async Task OnCreateComment(PhotoSharingExamples.Shared.Entities.Comment comment)
    {
        var tokenResult = await AuthenticationService.RequestAccessToken(new AccessTokenRequestOptions() { Scopes = new string[] { "comments" } });

        if (tokenResult.TryGetToken(out var token))
        {

            try
            {
                var newComment = await CommentsService.CreateAsync(comment.PhotoId, comment.Subject, comment.Body, token.Value);
                comments.Add(newComment);
            }
            catch (Exception ex)
            {
                message = ex.Message;
            }
        }
        else
        {
            NavigationManager.NavigateTo(tokenResult.RedirectUrl);
        }
    }

}
